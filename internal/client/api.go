// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
)

const (
	ApiKeyAuthScopes = "ApiKeyAuth.Scopes"
)

// Defines values for AppSchemasAdminAdminInfoStatus.
const (
	ВСети   AppSchemasAdminAdminInfoStatus = "В сети"
	НеВСети AppSchemasAdminAdminInfoStatus = "Не в сети"
)

// AdminsResponse Схема API-ответа, содержащая информацию о сервере и список его администраторов.
type AdminsResponse struct {
	// Admins Список администраторов сервера.
	Admins []AppSchemasAdminAdminInfo `json:"admins"`

	// Server Информация о сервере.
	Server AppSchemasAdminServerInfo `json:"server"`

	// Timestamp Отметка времени (Unix timestamp) получения данных.
	Timestamp *int `json:"timestamp"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	// ErrorCode Код ошибки
	ErrorCode string `json:"error_code"`

	// ErrorId Уникальный идентификатор ошибки
	ErrorId string `json:"error_id"`

	// ErrorMessage Описание ошибки
	ErrorMessage string `json:"error_message"`
}

// ArizonaServerInfo defines model for ArizonaServerInfo.
type ArizonaServerInfo struct {
	// DonateMultiplier Множитель доната
	DonateMultiplier *int `json:"donateMultiplier"`

	// ExperienceMultiplier Множитель опыта
	ExperienceMultiplier *int   `json:"experienceMultiplier"`
	Ip                   string `json:"ip"`
	Maxplayers           int    `json:"maxplayers"`

	// Name Название сервера
	Name string `json:"name"`

	// Number Идентификатор сервера
	Number int `json:"number"`

	// Online Количество онлайн игроков
	Online int `json:"online"`

	// Password Наличие пароля для подключения к серверу
	Password bool `json:"password"`
	Port     int  `json:"port"`

	// Status Текущий статус сервера (online, maintenance, offline)
	Status *string `json:"status,omitempty"`

	// StatusSince Время начала текущего статуса (для offline и maintenance)
	StatusSince *time.Time `json:"status_since"`
}

// AuctionInfo defines model for AuctionInfo.
type AuctionInfo struct {
	EndTime    *int `json:"end_time"`
	MinBet     *int `json:"min_bet"`
	StartPrice *int `json:"start_price"`
}

// Business defines model for Business.
type Business struct {
	AuctionInfo *AuctionInfo                `json:"auction_info,omitempty"`
	Id          *int                        `json:"id"`
	Location    Location                    `json:"location"`
	Name        *string                     `json:"name"`
	NearestPoi  *AppSchemasPlayerNearestPOI `json:"nearest_poi,omitempty"`
	OnAuction   *bool                       `json:"on_auction"`
	Type        *int                        `json:"type"`
}

// BusinessItem Модель, представляющая бизнес на карте.
type BusinessItem struct {
	// AuMinBet Минимальная ставка на аукционе.
	AuMinBet int `json:"auMinBet"`

	// AuStartPrice Начальная цена аукциона.
	AuStartPrice int `json:"auStartPrice"`

	// AuTimeEnd Время окончания аукциона (Unix timestamp).
	AuTimeEnd int `json:"auTimeEnd"`

	// HasAuction Признак, находится ли имущество на аукционе.
	HasAuction bool `json:"hasAuction"`

	// Id Уникальный идентификатор имущества.
	Id int `json:"id"`

	// Lx Координата X имущества.
	Lx float32 `json:"lx"`

	// Ly Координата Y имущества.
	Ly float32 `json:"ly"`

	// Name Название имущества.
	Name string `json:"name"`

	// NearestPoi Информация о ближайшей точке интереса (POI).
	NearestPoi *AppSchemasMapNearestPOI `json:"nearest_poi,omitempty"`

	// Owner Имя владельца имущества.
	Owner string `json:"owner"`

	// Type Тип бизнеса.
	Type int `json:"type"`
}

// Businesses Сгруппированные данные о бизнесах.
type Businesses struct {
	// NoAuction Объект, где ключи - типы бизнесов, а значения - массивы бизнесов, не выставленных на аукцион.
	NoAuction map[string][]BusinessItem `json:"noAuction"`

	// OnAuction Массив бизнесов, выставленных на аукцион.
	OnAuction []BusinessItem `json:"onAuction"`

	// OnMarketplace Массив бизнесов, выставленных на торговую площадку.
	OnMarketplace []interface{} `json:"onMarketplace"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Detail Описание ошибки
	Detail string `json:"detail"`
}

// Family defines model for Family.
type Family struct {
	// FlagId Идентификатор флага семьи
	FlagId *int `json:"flagId"`

	// Id Идентификатор семьи
	Id int `json:"id"`

	// Leader Никнейм лидера семьи
	Leader *string `json:"leader"`

	// Level Уровень семьи
	Level *int `json:"level"`

	// Members Список участников семьи
	Members []FamilyMember `json:"members"`

	// MembersCount Количество участников семьи
	MembersCount *int `json:"membersCount"`

	// Name Название семьи
	Name *string `json:"name"`
}

// FamilyBase defines model for FamilyBase.
type FamilyBase struct {
	// FlagId Идентификатор флага семьи
	FlagId *int `json:"flagId"`

	// Id Идентификатор семьи
	Id int `json:"id"`

	// Leader Никнейм лидера семьи
	Leader *string `json:"leader"`

	// Level Уровень семьи
	Level *int `json:"level"`

	// MembersCount Количество участников семьи
	MembersCount *int `json:"membersCount"`

	// Name Название семьи
	Name *string `json:"name"`
}

// FamilyListResponse defines model for FamilyListResponse.
type FamilyListResponse struct {
	// Families Список семей
	Families []FamilyBase `json:"families"`

	// Timestamp Время последнего обновления данных
	Timestamp int `json:"timestamp"`
}

// FamilyMember defines model for FamilyMember.
type FamilyMember struct {
	// Deputy Является ли игрок заместителем лидера семьи
	Deputy *bool `json:"deputy,omitempty"`

	// Id Идентификатор аккаунта игрока
	Id int `json:"id"`

	// JoinedAt Символическая дата подключения игрока к игре
	JoinedAt *int `json:"joined_at"`

	// Leader Является ли игрок лидером семьи
	Leader *bool `json:"leader,omitempty"`

	// Nickname Никнейм игрока
	Nickname string `json:"nickname"`

	// PlayerId Идентификатор игрока на сервере
	PlayerId *int `json:"player_id"`

	// Rank Ранг игрока в семье
	Rank *int `json:"rank"`

	// Warns Количество предупреждений игрока
	Warns *int `json:"warns"`
}

// FamilyResponse defines model for FamilyResponse.
type FamilyResponse struct {
	Family Family `json:"family"`

	// Timestamp Время последнего обновления данных
	Timestamp int `json:"timestamp"`
}

// FractionResponse defines model for FractionResponse.
type FractionResponse struct {
	// Data Данные игроков выбранной фракции
	Data map[string]OnlinePlayer `json:"data"`

	// Timestamp Временная метка получения данных
	Timestamp int `json:"timestamp"`
}

// FractionsListResponse defines model for FractionsListResponse.
type FractionsListResponse struct {
	// Data Список доступных фракций
	Data []string `json:"data"`

	// Timestamp Временная метка получения данных
	Timestamp int `json:"timestamp"`
}

// GhettoResponse Схема ответа для данных о территориях гетто.
type GhettoResponse struct {
	// Data Объект, содержащий данные о различных квадратах на карте, индексированных числовыми строками.
	Data map[string]GhettoZone `json:"data"`

	// Timestamp Отметка времени (Unix timestamp) генерации данных.
	Timestamp int `json:"timestamp"`
}

// GhettoZone Модель, описывающая квадрат на карте (территорию).
type GhettoZone struct {
	// ArzId Идентификатор территории по Аризоновски.
	ArzId *int `json:"arzId"`

	// Coins Количество 'монет' семьи, связанных с территорией.
	Coins *int `json:"coins"`

	// Color Цвет территории в целочисленном представлении.
	Color int `json:"color"`

	// FamId Идентификатор семьи, которой принадлежит территория.
	FamId *int `json:"famId"`

	// FamName Название семьи, которой принадлежит территория.
	FamName *string `json:"famName"`

	// FlagId Идентификатор флага семьи.
	FlagId *int `json:"flagId"`

	// FractionId Идентификатор фракции, которой принадлежит территория.
	FractionId *int `json:"fraction_id"`

	// LogoId Идентификатор логотипа семьи.
	LogoId *int `json:"logoId"`

	// Money Количество денег, связанная с территорией.
	Money *int `json:"money"`

	// PropertyName Название особого объекта на территории.
	PropertyName *string `json:"propertyName"`

	// Respects Количество респектов, связанное с территорией.
	Respects *int `json:"respects"`

	// SquareEnd Модель для координатной точки.
	SquareEnd Point `json:"squareEnd"`

	// SquareStart Модель для координатной точки.
	SquareStart Point `json:"squareStart"`
}

// HTTPValidationError defines model for HTTPValidationError.
type HTTPValidationError struct {
	Detail *[]ValidationError `json:"detail,omitempty"`
}

// House defines model for House.
type House struct {
	AuctionInfo *AuctionInfo                `json:"auction_info,omitempty"`
	Id          *int                        `json:"id"`
	Location    Location                    `json:"location"`
	Name        *string                     `json:"name"`
	NearestPoi  *AppSchemasPlayerNearestPOI `json:"nearest_poi,omitempty"`
	OnAuction   *bool                       `json:"on_auction"`
}

// HouseItem Модель, представляющая дом на карте.
type HouseItem struct {
	// AuMinBet Минимальная ставка на аукционе.
	AuMinBet int `json:"auMinBet"`

	// AuStartPrice Начальная цена аукциона.
	AuStartPrice int `json:"auStartPrice"`

	// AuTimeEnd Время окончания аукциона (Unix timestamp).
	AuTimeEnd int `json:"auTimeEnd"`

	// HasAuction Признак, находится ли имущество на аукционе.
	HasAuction bool `json:"hasAuction"`

	// Id Уникальный идентификатор имущества.
	Id int `json:"id"`

	// Lx Координата X имущества.
	Lx float32 `json:"lx"`

	// Ly Координата Y имущества.
	Ly float32 `json:"ly"`

	// Name Название имущества.
	Name string `json:"name"`

	// NearestPoi Информация о ближайшей точке интереса (POI).
	NearestPoi *AppSchemasMapNearestPOI `json:"nearest_poi,omitempty"`

	// Owner Имя владельца имущества.
	Owner string `json:"owner"`
}

// Houses Сгруппированные данные о домах.
type Houses struct {
	// HasOwner Массив домов с владельцем.
	HasOwner []HouseItem `json:"hasOwner"`

	// NoOwner Массив домов без владельца.
	NoOwner []HouseItem `json:"noOwner"`

	// OnAuction Массив домов, выставленных на аукцион.
	OnAuction []HouseItem `json:"onAuction"`

	// OnMarketplace Массив домов, выставленных на торговую площадку.
	OnMarketplace []interface{} `json:"onMarketplace"`
}

// LeadersResponse defines model for LeadersResponse.
type LeadersResponse struct {
	// Data Данные о лидерах фракций
	Data map[string]OnlinePlayer `json:"data"`

	// Timestamp Временная метка получения данных
	Timestamp int `json:"timestamp"`
}

// LevelInfo defines model for LevelInfo.
type LevelInfo struct {
	CurrentExp *int `json:"current_exp"`
	Level      *int `json:"level"`
	NextExp    *int `json:"next_exp"`
}

// Location defines model for Location.
type Location struct {
	X *float32 `json:"x"`
	Y *float32 `json:"y"`
}

// MapResponse Основная модель ответа для карты недвижимости.
type MapResponse struct {
	// Businesses Сгруппированные данные о бизнесах.
	Businesses Businesses `json:"businesses"`

	// Houses Сгруппированные данные о домах.
	Houses Houses `json:"houses"`
}

// MoneyInfo defines model for MoneyInfo.
type MoneyInfo struct {
	Bank             *int                `json:"bank"`
	Charity          *int                `json:"charity"`
	Deposit          *int                `json:"deposit"`
	DonateCurrency   *int                `json:"donate_currency"`
	Hand             *int                `json:"hand"`
	PersonalAccounts *map[string]*string `json:"personal_accounts"`
	PhoneBalance     *int                `json:"phone_balance"`
	Total            *int                `json:"total"`
}

// OnlinePlayer defines model for OnlinePlayer.
type OnlinePlayer struct {
	// InUniform Одет ли игрок в форму
	InUniform *bool `json:"inUniform"`

	// IsLeader Игрок является лидером фракции
	IsLeader *bool `json:"isLeader"`

	// IsZam Игрок является заместителем
	IsZam *bool `json:"isZam"`

	// Level Уровень игрока
	Level int `json:"level"`

	// Member Название фракции
	Member *string `json:"member"`

	// Name Имя игрока
	Name *string `json:"name"`

	// Position Должность во фракции
	Position *string `json:"position"`
}

// OnlinePlayersResponse defines model for OnlinePlayersResponse.
type OnlinePlayersResponse struct {
	// Data Данные всех онлайн игроков
	Data map[string]OnlinePlayer `json:"data"`

	// Timestamp Временная метка получения данных
	Timestamp int `json:"timestamp"`
}

// OrganizationInfo defines model for OrganizationInfo.
type OrganizationInfo struct {
	LastSeen *int        `json:"last_seen"`
	Name     *string     `json:"name"`
	Rank     *string     `json:"rank"`
	Uniform  interface{} `json:"uniform"`
}

// PlayerFamilyInfo defines model for PlayerFamilyInfo.
type PlayerFamilyInfo struct {
	// Id Идентификатор семьи
	Id         int                    `json:"id"`
	MemberInfo PlayerFamilyMemberInfo `json:"member_info"`

	// Name Название семьи
	Name string `json:"name"`

	// Timestamp Время последнего обновления данных о семье
	Timestamp int `json:"timestamp"`
}

// PlayerFamilyMemberInfo defines model for PlayerFamilyMemberInfo.
type PlayerFamilyMemberInfo struct {
	// Deputy Является ли заместителем
	Deputy *bool `json:"deputy,omitempty"`

	// Id Идентификатор игрока
	Id *int `json:"id"`

	// Leader Является ли лидером
	Leader *bool `json:"leader,omitempty"`

	// Nickname Никнейм игрока
	Nickname *string `json:"nickname"`

	// Rank Ранг в семье
	Rank *int `json:"rank"`

	// Warns Количество предупреждений
	Warns *int `json:"warns"`
}

// PlayerResponse defines model for PlayerResponse.
type PlayerResponse struct {
	Admin         *AppSchemasPlayerAdminInfo `json:"admin,omitempty"`
	DrugAddiction *int                       `json:"drug_addiction"`
	Family        *PlayerFamilyInfo          `json:"family,omitempty"`
	Health        *int                       `json:"health"`
	HoursPlayed   *int                       `json:"hours_played"`
	Hunger        *int                       `json:"hunger"`
	Id            int                        `json:"id"`
	Job           *string                    `json:"job"`
	LawAbiding    *int                       `json:"law_abiding"`
	Level         LevelInfo                  `json:"level"`
	Money         MoneyInfo                  `json:"money"`
	Organization  OrganizationInfo           `json:"organization"`
	PhoneNumber   *int                       `json:"phone_number"`
	Property      PropertyInfo               `json:"property"`
	Server        AppSchemasPlayerServerInfo `json:"server"`
	Spouse        *string                    `json:"spouse"`
	Status        StatusInfo                 `json:"status"`

	// Timestamp Время последнего обновления данных об онлайне, на основе которых формируются поля status и organization
	Timestamp   *int    `json:"timestamp"`
	VipInfo     VipInfo `json:"vip_info"`
	WantedLevel *int    `json:"wanted_level"`
	Warnings    *int    `json:"warnings"`
}

// Point Модель для координатной точки.
type Point struct {
	// X Координата X
	X float32 `json:"x"`

	// Y Координата Y
	Y float32 `json:"y"`
}

// PropertyInfo defines model for PropertyInfo.
type PropertyInfo struct {
	Businesses *[]Business `json:"businesses"`
	Houses     *[]House    `json:"houses"`
}

// ServerCacheStatus defines model for ServerCacheStatus.
type ServerCacheStatus struct {
	// HasOnline Наличие данных об онлайн игроках
	HasOnline bool `json:"has_online"`

	// HasSobes Наличие данных о собеседованиях
	HasSobes bool `json:"has_sobes"`

	// LastUpdate Временная метка последнего обновления данных
	LastUpdate *int `json:"last_update"`
}

// ServerCacheStatusResponse defines model for ServerCacheStatusResponse.
type ServerCacheStatusResponse struct {
	// Servers Статус кэша для каждого сервера
	Servers map[string]ServerCacheStatus `json:"servers"`
}

// SobesEntry defines model for SobesEntry.
type SobesEntry struct {
	// Place Место проведения собеседования
	Place string `json:"place"`

	// Time Время проведения собеседования
	Time string `json:"time"`
}

// SobesResponse defines model for SobesResponse.
type SobesResponse struct {
	// Data Данные о запланированных собеседованиях
	Data map[string]SobesEntry `json:"data"`

	// Timestamp Временная метка получения данных
	Timestamp int `json:"timestamp"`
}

// StatusInfo defines model for StatusInfo.
type StatusInfo struct {
	LastSeen *int `json:"last_seen"`
	Online   bool `json:"online"`
	PlayerId *int `json:"player_id"`
}

// StatusResponse defines model for StatusResponse.
type StatusResponse struct {
	Api ServerCacheStatusResponse `json:"api"`

	// Arizona Список серверов Аризоны
	Arizona []ArizonaServerInfo `json:"arizona"`

	// Timestamp Unix-отметка времени последнего обновления данных о серверах на стороне Аризоны.
	Timestamp *int `json:"timestamp"`
}

// SubleadersResponse defines model for SubleadersResponse.
type SubleadersResponse struct {
	// Data Данные о заместителях фракций
	Data map[string]OnlinePlayer `json:"data"`

	// Timestamp Временная метка получения данных
	Timestamp int `json:"timestamp"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	Loc  []ValidationError_Loc_Item `json:"loc"`
	Msg  string                     `json:"msg"`
	Type string                     `json:"type"`
}

// ValidationErrorLoc0 defines model for .
type ValidationErrorLoc0 = string

// ValidationErrorLoc1 defines model for .
type ValidationErrorLoc1 = int

// ValidationError_Loc_Item defines model for ValidationError.loc.Item.
type ValidationError_Loc_Item struct {
	union json.RawMessage
}

// VipInfo defines model for VipInfo.
type VipInfo struct {
	AddVip         interface{} `json:"add_vip"`
	ExpirationDate interface{} `json:"expiration_date"`
	Level          *string     `json:"level"`
}

// AppSchemasAdminAdminInfo defines model for app__schemas__admin__AdminInfo.
type AppSchemasAdminAdminInfo struct {
	// ForumUrl URL-адрес профиля на форуме администратора.
	ForumUrl *string `json:"forum_url"`

	// Level Уровень администратора. (приблизительно)
	Level *int `json:"level"`

	// Nickname Игровой никнейм администратора.
	Nickname string `json:"nickname"`

	// Position Должность администратора.
	Position *string `json:"position"`

	// ShortName Короткое имя или тег администратора.
	ShortName *string `json:"short_name"`

	// Status Онлайн-статус администратора.
	Status AppSchemasAdminAdminInfoStatus `json:"status"`

	// VkUrl URL-адрес профиля ВКонтакте администратора.
	VkUrl *string `json:"vk_url"`
}

// AppSchemasAdminAdminInfoStatus Онлайн-статус администратора.
type AppSchemasAdminAdminInfoStatus string

// AppSchemasAdminServerInfo Информация о сервере.
type AppSchemasAdminServerInfo struct {
	// Id Уникальный идентификатор сервера.
	Id int `json:"id"`

	// Name Название сервера.
	Name string `json:"name"`
}

// AppSchemasMapNearestPOI Информация о ближайшей точке интереса (POI).
type AppSchemasMapNearestPOI struct {
	// City Город, в котором находится ближайшая POI.
	City string `json:"city"`

	// Name Название ближайшей точки интереса (POI).
	Name string `json:"name"`

	// X Координата X ближайшей POI.
	X float32 `json:"x"`

	// Y Координата Y ближайшей POI.
	Y float32 `json:"y"`
}

// AppSchemasPlayerAdminInfo defines model for app__schemas__player__AdminInfo.
type AppSchemasPlayerAdminInfo struct {
	ForumUrl  *string `json:"forum_url"`
	Level     *int    `json:"level"`
	Nickname  string  `json:"nickname"`
	Position  *string `json:"position"`
	ShortName *string `json:"short_name"`
	VkUrl     *string `json:"vk_url"`
}

// AppSchemasPlayerNearestPOI defines model for app__schemas__player__NearestPOI.
type AppSchemasPlayerNearestPOI struct {
	City *string  `json:"city"`
	Name *string  `json:"name"`
	X    *float32 `json:"x"`
	Y    *float32 `json:"y"`
}

// AppSchemasPlayerServerInfo defines model for app__schemas__player__ServerInfo.
type AppSchemasPlayerServerInfo struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// GetServerAdminsV2AdminsGetParams defines parameters for GetServerAdminsV2AdminsGet.
type GetServerAdminsV2AdminsGetParams struct {
	// ServerId ID сервера
	ServerId int `form:"serverId" json:"serverId"`
}

// GetFamiliesV2FamiliesGetParams defines parameters for GetFamiliesV2FamiliesGet.
type GetFamiliesV2FamiliesGetParams struct {
	ServerId interface{} `form:"serverId" json:"serverId"`
}

// GetFamilyV2FamilyGetParams defines parameters for GetFamilyV2FamilyGet.
type GetFamilyV2FamilyGetParams struct {
	// FamId ID семьи для поиска
	FamId    int         `form:"famId" json:"famId"`
	ServerId interface{} `form:"serverId" json:"serverId"`
}

// GetFractionMembersV2FractionGetParams defines parameters for GetFractionMembersV2FractionGet.
type GetFractionMembersV2FractionGetParams struct {
	ServerId   int    `form:"serverId" json:"serverId"`
	FractionId string `form:"fractionId" json:"fractionId"`
}

// GetFractionsListV2FractionsGetParams defines parameters for GetFractionsListV2FractionsGet.
type GetFractionsListV2FractionsGetParams struct {
	ServerId int `form:"serverId" json:"serverId"`
}

// GetGhettoListV2GhettoGetParams defines parameters for GetGhettoListV2GhettoGet.
type GetGhettoListV2GhettoGetParams struct {
	ServerId int `form:"serverId" json:"serverId"`
}

// ReceiveGhettoDataV2GhettoServerIdPostJSONBody defines parameters for ReceiveGhettoDataV2GhettoServerIdPost.
type ReceiveGhettoDataV2GhettoServerIdPostJSONBody map[string]GhettoZone

// GetLeadersListV2LeadersGetParams defines parameters for GetLeadersListV2LeadersGet.
type GetLeadersListV2LeadersGetParams struct {
	ServerId int `form:"serverId" json:"serverId"`
}

// GetPropertyMapWithPoiV2MapGetParams defines parameters for GetPropertyMapWithPoiV2MapGet.
type GetPropertyMapWithPoiV2MapGetParams struct {
	ServerId interface{} `form:"serverId" json:"serverId"`
}

// GetOnlineListV2OnlineGetParams defines parameters for GetOnlineListV2OnlineGet.
type GetOnlineListV2OnlineGetParams struct {
	ServerId int `form:"serverId" json:"serverId"`
}

// FindPlayerV2PlayerFindGetParams defines parameters for FindPlayerV2PlayerFindGet.
type FindPlayerV2PlayerFindGetParams struct {
	Nickname string      `form:"nickname" json:"nickname"`
	ServerId interface{} `form:"serverId" json:"serverId"`
}

// GetSobesListV2SobesGetParams defines parameters for GetSobesListV2SobesGet.
type GetSobesListV2SobesGetParams struct {
	ServerId int `form:"serverId" json:"serverId"`
}

// GetSubleadersListV2SubleadersGetParams defines parameters for GetSubleadersListV2SubleadersGet.
type GetSubleadersListV2SubleadersGetParams struct {
	ServerId int `form:"serverId" json:"serverId"`
}

// ReceiveGhettoDataV2GhettoServerIdPostJSONRequestBody defines body for ReceiveGhettoDataV2GhettoServerIdPost for application/json ContentType.
type ReceiveGhettoDataV2GhettoServerIdPostJSONRequestBody ReceiveGhettoDataV2GhettoServerIdPostJSONBody

// AsValidationErrorLoc0 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc0
func (t ValidationError_Loc_Item) AsValidationErrorLoc0() (ValidationErrorLoc0, error) {
	var body ValidationErrorLoc0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc0 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) FromValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc0 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc0
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc0(v ValidationErrorLoc0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsValidationErrorLoc1 returns the union data inside the ValidationError_Loc_Item as a ValidationErrorLoc1
func (t ValidationError_Loc_Item) AsValidationErrorLoc1() (ValidationErrorLoc1, error) {
	var body ValidationErrorLoc1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromValidationErrorLoc1 overwrites any union data inside the ValidationError_Loc_Item as the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) FromValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeValidationErrorLoc1 performs a merge with any union data inside the ValidationError_Loc_Item, using the provided ValidationErrorLoc1
func (t *ValidationError_Loc_Item) MergeValidationErrorLoc1(v ValidationErrorLoc1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ValidationError_Loc_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ValidationError_Loc_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetServerAdminsV2AdminsGet request
	GetServerAdminsV2AdminsGet(ctx context.Context, params *GetServerAdminsV2AdminsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFamiliesV2FamiliesGet request
	GetFamiliesV2FamiliesGet(ctx context.Context, params *GetFamiliesV2FamiliesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFamilyV2FamilyGet request
	GetFamilyV2FamilyGet(ctx context.Context, params *GetFamilyV2FamilyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFractionMembersV2FractionGet request
	GetFractionMembersV2FractionGet(ctx context.Context, params *GetFractionMembersV2FractionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFractionsListV2FractionsGet request
	GetFractionsListV2FractionsGet(ctx context.Context, params *GetFractionsListV2FractionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGhettoListV2GhettoGet request
	GetGhettoListV2GhettoGet(ctx context.Context, params *GetGhettoListV2GhettoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReceiveGhettoDataV2GhettoServerIdPostWithBody request with any body
	ReceiveGhettoDataV2GhettoServerIdPostWithBody(ctx context.Context, serverId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReceiveGhettoDataV2GhettoServerIdPost(ctx context.Context, serverId int, body ReceiveGhettoDataV2GhettoServerIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLeadersListV2LeadersGet request
	GetLeadersListV2LeadersGet(ctx context.Context, params *GetLeadersListV2LeadersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPropertyMapWithPoiV2MapGet request
	GetPropertyMapWithPoiV2MapGet(ctx context.Context, params *GetPropertyMapWithPoiV2MapGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOnlineListV2OnlineGet request
	GetOnlineListV2OnlineGet(ctx context.Context, params *GetOnlineListV2OnlineGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPlayerV2PlayerFindGet request
	FindPlayerV2PlayerFindGet(ctx context.Context, params *FindPlayerV2PlayerFindGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSobesListV2SobesGet request
	GetSobesListV2SobesGet(ctx context.Context, params *GetSobesListV2SobesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStatusV2StatusGet request
	GetStatusV2StatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubleadersListV2SubleadersGet request
	GetSubleadersListV2SubleadersGet(ctx context.Context, params *GetSubleadersListV2SubleadersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetServerAdminsV2AdminsGet(ctx context.Context, params *GetServerAdminsV2AdminsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetServerAdminsV2AdminsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFamiliesV2FamiliesGet(ctx context.Context, params *GetFamiliesV2FamiliesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFamiliesV2FamiliesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFamilyV2FamilyGet(ctx context.Context, params *GetFamilyV2FamilyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFamilyV2FamilyGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFractionMembersV2FractionGet(ctx context.Context, params *GetFractionMembersV2FractionGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFractionMembersV2FractionGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFractionsListV2FractionsGet(ctx context.Context, params *GetFractionsListV2FractionsGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFractionsListV2FractionsGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGhettoListV2GhettoGet(ctx context.Context, params *GetGhettoListV2GhettoGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGhettoListV2GhettoGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReceiveGhettoDataV2GhettoServerIdPostWithBody(ctx context.Context, serverId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReceiveGhettoDataV2GhettoServerIdPostRequestWithBody(c.Server, serverId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReceiveGhettoDataV2GhettoServerIdPost(ctx context.Context, serverId int, body ReceiveGhettoDataV2GhettoServerIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReceiveGhettoDataV2GhettoServerIdPostRequest(c.Server, serverId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLeadersListV2LeadersGet(ctx context.Context, params *GetLeadersListV2LeadersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLeadersListV2LeadersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPropertyMapWithPoiV2MapGet(ctx context.Context, params *GetPropertyMapWithPoiV2MapGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPropertyMapWithPoiV2MapGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOnlineListV2OnlineGet(ctx context.Context, params *GetOnlineListV2OnlineGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOnlineListV2OnlineGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPlayerV2PlayerFindGet(ctx context.Context, params *FindPlayerV2PlayerFindGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPlayerV2PlayerFindGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSobesListV2SobesGet(ctx context.Context, params *GetSobesListV2SobesGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSobesListV2SobesGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStatusV2StatusGet(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatusV2StatusGetRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubleadersListV2SubleadersGet(ctx context.Context, params *GetSubleadersListV2SubleadersGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubleadersListV2SubleadersGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetServerAdminsV2AdminsGetRequest generates requests for GetServerAdminsV2AdminsGet
func NewGetServerAdminsV2AdminsGetRequest(server string, params *GetServerAdminsV2AdminsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/admins")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFamiliesV2FamiliesGetRequest generates requests for GetFamiliesV2FamiliesGet
func NewGetFamiliesV2FamiliesGetRequest(server string, params *GetFamiliesV2FamiliesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/families")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFamilyV2FamilyGetRequest generates requests for GetFamilyV2FamilyGet
func NewGetFamilyV2FamilyGetRequest(server string, params *GetFamilyV2FamilyGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/family")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "famId", runtime.ParamLocationQuery, params.FamId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFractionMembersV2FractionGetRequest generates requests for GetFractionMembersV2FractionGet
func NewGetFractionMembersV2FractionGetRequest(server string, params *GetFractionMembersV2FractionGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/fraction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fractionId", runtime.ParamLocationQuery, params.FractionId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFractionsListV2FractionsGetRequest generates requests for GetFractionsListV2FractionsGet
func NewGetFractionsListV2FractionsGetRequest(server string, params *GetFractionsListV2FractionsGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/fractions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGhettoListV2GhettoGetRequest generates requests for GetGhettoListV2GhettoGet
func NewGetGhettoListV2GhettoGetRequest(server string, params *GetGhettoListV2GhettoGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/ghetto")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReceiveGhettoDataV2GhettoServerIdPostRequest calls the generic ReceiveGhettoDataV2GhettoServerIdPost builder with application/json body
func NewReceiveGhettoDataV2GhettoServerIdPostRequest(server string, serverId int, body ReceiveGhettoDataV2GhettoServerIdPostJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReceiveGhettoDataV2GhettoServerIdPostRequestWithBody(server, serverId, "application/json", bodyReader)
}

// NewReceiveGhettoDataV2GhettoServerIdPostRequestWithBody generates requests for ReceiveGhettoDataV2GhettoServerIdPost with any type of body
func NewReceiveGhettoDataV2GhettoServerIdPostRequestWithBody(server string, serverId int, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "server_id", runtime.ParamLocationPath, serverId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/ghetto/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLeadersListV2LeadersGetRequest generates requests for GetLeadersListV2LeadersGet
func NewGetLeadersListV2LeadersGetRequest(server string, params *GetLeadersListV2LeadersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/leaders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPropertyMapWithPoiV2MapGetRequest generates requests for GetPropertyMapWithPoiV2MapGet
func NewGetPropertyMapWithPoiV2MapGetRequest(server string, params *GetPropertyMapWithPoiV2MapGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/map")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOnlineListV2OnlineGetRequest generates requests for GetOnlineListV2OnlineGet
func NewGetOnlineListV2OnlineGetRequest(server string, params *GetOnlineListV2OnlineGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/online")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindPlayerV2PlayerFindGetRequest generates requests for FindPlayerV2PlayerFindGet
func NewFindPlayerV2PlayerFindGetRequest(server string, params *FindPlayerV2PlayerFindGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/player/find")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "nickname", runtime.ParamLocationQuery, params.Nickname); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSobesListV2SobesGetRequest generates requests for GetSobesListV2SobesGet
func NewGetSobesListV2SobesGetRequest(server string, params *GetSobesListV2SobesGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/sobes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetStatusV2StatusGetRequest generates requests for GetStatusV2StatusGet
func NewGetStatusV2StatusGetRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubleadersListV2SubleadersGetRequest generates requests for GetSubleadersListV2SubleadersGet
func NewGetSubleadersListV2SubleadersGetRequest(server string, params *GetSubleadersListV2SubleadersGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v2/subleaders")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "serverId", runtime.ParamLocationQuery, params.ServerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetServerAdminsV2AdminsGetWithResponse request
	GetServerAdminsV2AdminsGetWithResponse(ctx context.Context, params *GetServerAdminsV2AdminsGetParams, reqEditors ...RequestEditorFn) (*GetServerAdminsV2AdminsGetResponse, error)

	// GetFamiliesV2FamiliesGetWithResponse request
	GetFamiliesV2FamiliesGetWithResponse(ctx context.Context, params *GetFamiliesV2FamiliesGetParams, reqEditors ...RequestEditorFn) (*GetFamiliesV2FamiliesGetResponse, error)

	// GetFamilyV2FamilyGetWithResponse request
	GetFamilyV2FamilyGetWithResponse(ctx context.Context, params *GetFamilyV2FamilyGetParams, reqEditors ...RequestEditorFn) (*GetFamilyV2FamilyGetResponse, error)

	// GetFractionMembersV2FractionGetWithResponse request
	GetFractionMembersV2FractionGetWithResponse(ctx context.Context, params *GetFractionMembersV2FractionGetParams, reqEditors ...RequestEditorFn) (*GetFractionMembersV2FractionGetResponse, error)

	// GetFractionsListV2FractionsGetWithResponse request
	GetFractionsListV2FractionsGetWithResponse(ctx context.Context, params *GetFractionsListV2FractionsGetParams, reqEditors ...RequestEditorFn) (*GetFractionsListV2FractionsGetResponse, error)

	// GetGhettoListV2GhettoGetWithResponse request
	GetGhettoListV2GhettoGetWithResponse(ctx context.Context, params *GetGhettoListV2GhettoGetParams, reqEditors ...RequestEditorFn) (*GetGhettoListV2GhettoGetResponse, error)

	// ReceiveGhettoDataV2GhettoServerIdPostWithBodyWithResponse request with any body
	ReceiveGhettoDataV2GhettoServerIdPostWithBodyWithResponse(ctx context.Context, serverId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReceiveGhettoDataV2GhettoServerIdPostResponse, error)

	ReceiveGhettoDataV2GhettoServerIdPostWithResponse(ctx context.Context, serverId int, body ReceiveGhettoDataV2GhettoServerIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ReceiveGhettoDataV2GhettoServerIdPostResponse, error)

	// GetLeadersListV2LeadersGetWithResponse request
	GetLeadersListV2LeadersGetWithResponse(ctx context.Context, params *GetLeadersListV2LeadersGetParams, reqEditors ...RequestEditorFn) (*GetLeadersListV2LeadersGetResponse, error)

	// GetPropertyMapWithPoiV2MapGetWithResponse request
	GetPropertyMapWithPoiV2MapGetWithResponse(ctx context.Context, params *GetPropertyMapWithPoiV2MapGetParams, reqEditors ...RequestEditorFn) (*GetPropertyMapWithPoiV2MapGetResponse, error)

	// GetOnlineListV2OnlineGetWithResponse request
	GetOnlineListV2OnlineGetWithResponse(ctx context.Context, params *GetOnlineListV2OnlineGetParams, reqEditors ...RequestEditorFn) (*GetOnlineListV2OnlineGetResponse, error)

	// FindPlayerV2PlayerFindGetWithResponse request
	FindPlayerV2PlayerFindGetWithResponse(ctx context.Context, params *FindPlayerV2PlayerFindGetParams, reqEditors ...RequestEditorFn) (*FindPlayerV2PlayerFindGetResponse, error)

	// GetSobesListV2SobesGetWithResponse request
	GetSobesListV2SobesGetWithResponse(ctx context.Context, params *GetSobesListV2SobesGetParams, reqEditors ...RequestEditorFn) (*GetSobesListV2SobesGetResponse, error)

	// GetStatusV2StatusGetWithResponse request
	GetStatusV2StatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusV2StatusGetResponse, error)

	// GetSubleadersListV2SubleadersGetWithResponse request
	GetSubleadersListV2SubleadersGetWithResponse(ctx context.Context, params *GetSubleadersListV2SubleadersGetParams, reqEditors ...RequestEditorFn) (*GetSubleadersListV2SubleadersGetResponse, error)
}

type GetServerAdminsV2AdminsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AdminsResponse
	JSON400      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON422      *HTTPValidationError
	JSON500      *ApiErrorResponse
	JSON503      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetServerAdminsV2AdminsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetServerAdminsV2AdminsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFamiliesV2FamiliesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FamilyListResponse
	JSON404      *ApiErrorResponse
	JSON422      *HTTPValidationError
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFamiliesV2FamiliesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFamiliesV2FamiliesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFamilyV2FamilyGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FamilyResponse
	JSON404      *ApiErrorResponse
	JSON422      *HTTPValidationError
	JSON500      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetFamilyV2FamilyGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFamilyV2FamilyGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFractionMembersV2FractionGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FractionResponse
	JSON404      *ErrorResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetFractionMembersV2FractionGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFractionMembersV2FractionGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFractionsListV2FractionsGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FractionsListResponse
	JSON404      *ErrorResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetFractionsListV2FractionsGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFractionsListV2FractionsGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGhettoListV2GhettoGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GhettoResponse
	JSON404      *ErrorResponse
	JSON422      *HTTPValidationError
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetGhettoListV2GhettoGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGhettoListV2GhettoGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReceiveGhettoDataV2GhettoServerIdPostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
	JSON422      *HTTPValidationError
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ReceiveGhettoDataV2GhettoServerIdPostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReceiveGhettoDataV2GhettoServerIdPostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLeadersListV2LeadersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LeadersResponse
	JSON404      *ErrorResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetLeadersListV2LeadersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLeadersListV2LeadersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPropertyMapWithPoiV2MapGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MapResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetPropertyMapWithPoiV2MapGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPropertyMapWithPoiV2MapGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOnlineListV2OnlineGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OnlinePlayersResponse
	JSON404      *ErrorResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetOnlineListV2OnlineGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOnlineListV2OnlineGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPlayerV2PlayerFindGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlayerResponse
	JSON400      *ApiErrorResponse
	JSON404      *ApiErrorResponse
	JSON422      *HTTPValidationError
	JSON500      *ApiErrorResponse
	JSON503      *ApiErrorResponse
}

// Status returns HTTPResponse.Status
func (r FindPlayerV2PlayerFindGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPlayerV2PlayerFindGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSobesListV2SobesGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SobesResponse
	JSON404      *ErrorResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetSobesListV2SobesGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSobesListV2SobesGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatusV2StatusGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatusResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetStatusV2StatusGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatusV2StatusGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubleadersListV2SubleadersGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SubleadersResponse
	JSON404      *ErrorResponse
	JSON422      *HTTPValidationError
}

// Status returns HTTPResponse.Status
func (r GetSubleadersListV2SubleadersGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubleadersListV2SubleadersGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetServerAdminsV2AdminsGetWithResponse request returning *GetServerAdminsV2AdminsGetResponse
func (c *ClientWithResponses) GetServerAdminsV2AdminsGetWithResponse(ctx context.Context, params *GetServerAdminsV2AdminsGetParams, reqEditors ...RequestEditorFn) (*GetServerAdminsV2AdminsGetResponse, error) {
	rsp, err := c.GetServerAdminsV2AdminsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetServerAdminsV2AdminsGetResponse(rsp)
}

// GetFamiliesV2FamiliesGetWithResponse request returning *GetFamiliesV2FamiliesGetResponse
func (c *ClientWithResponses) GetFamiliesV2FamiliesGetWithResponse(ctx context.Context, params *GetFamiliesV2FamiliesGetParams, reqEditors ...RequestEditorFn) (*GetFamiliesV2FamiliesGetResponse, error) {
	rsp, err := c.GetFamiliesV2FamiliesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFamiliesV2FamiliesGetResponse(rsp)
}

// GetFamilyV2FamilyGetWithResponse request returning *GetFamilyV2FamilyGetResponse
func (c *ClientWithResponses) GetFamilyV2FamilyGetWithResponse(ctx context.Context, params *GetFamilyV2FamilyGetParams, reqEditors ...RequestEditorFn) (*GetFamilyV2FamilyGetResponse, error) {
	rsp, err := c.GetFamilyV2FamilyGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFamilyV2FamilyGetResponse(rsp)
}

// GetFractionMembersV2FractionGetWithResponse request returning *GetFractionMembersV2FractionGetResponse
func (c *ClientWithResponses) GetFractionMembersV2FractionGetWithResponse(ctx context.Context, params *GetFractionMembersV2FractionGetParams, reqEditors ...RequestEditorFn) (*GetFractionMembersV2FractionGetResponse, error) {
	rsp, err := c.GetFractionMembersV2FractionGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFractionMembersV2FractionGetResponse(rsp)
}

// GetFractionsListV2FractionsGetWithResponse request returning *GetFractionsListV2FractionsGetResponse
func (c *ClientWithResponses) GetFractionsListV2FractionsGetWithResponse(ctx context.Context, params *GetFractionsListV2FractionsGetParams, reqEditors ...RequestEditorFn) (*GetFractionsListV2FractionsGetResponse, error) {
	rsp, err := c.GetFractionsListV2FractionsGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFractionsListV2FractionsGetResponse(rsp)
}

// GetGhettoListV2GhettoGetWithResponse request returning *GetGhettoListV2GhettoGetResponse
func (c *ClientWithResponses) GetGhettoListV2GhettoGetWithResponse(ctx context.Context, params *GetGhettoListV2GhettoGetParams, reqEditors ...RequestEditorFn) (*GetGhettoListV2GhettoGetResponse, error) {
	rsp, err := c.GetGhettoListV2GhettoGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGhettoListV2GhettoGetResponse(rsp)
}

// ReceiveGhettoDataV2GhettoServerIdPostWithBodyWithResponse request with arbitrary body returning *ReceiveGhettoDataV2GhettoServerIdPostResponse
func (c *ClientWithResponses) ReceiveGhettoDataV2GhettoServerIdPostWithBodyWithResponse(ctx context.Context, serverId int, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReceiveGhettoDataV2GhettoServerIdPostResponse, error) {
	rsp, err := c.ReceiveGhettoDataV2GhettoServerIdPostWithBody(ctx, serverId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReceiveGhettoDataV2GhettoServerIdPostResponse(rsp)
}

func (c *ClientWithResponses) ReceiveGhettoDataV2GhettoServerIdPostWithResponse(ctx context.Context, serverId int, body ReceiveGhettoDataV2GhettoServerIdPostJSONRequestBody, reqEditors ...RequestEditorFn) (*ReceiveGhettoDataV2GhettoServerIdPostResponse, error) {
	rsp, err := c.ReceiveGhettoDataV2GhettoServerIdPost(ctx, serverId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReceiveGhettoDataV2GhettoServerIdPostResponse(rsp)
}

// GetLeadersListV2LeadersGetWithResponse request returning *GetLeadersListV2LeadersGetResponse
func (c *ClientWithResponses) GetLeadersListV2LeadersGetWithResponse(ctx context.Context, params *GetLeadersListV2LeadersGetParams, reqEditors ...RequestEditorFn) (*GetLeadersListV2LeadersGetResponse, error) {
	rsp, err := c.GetLeadersListV2LeadersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLeadersListV2LeadersGetResponse(rsp)
}

// GetPropertyMapWithPoiV2MapGetWithResponse request returning *GetPropertyMapWithPoiV2MapGetResponse
func (c *ClientWithResponses) GetPropertyMapWithPoiV2MapGetWithResponse(ctx context.Context, params *GetPropertyMapWithPoiV2MapGetParams, reqEditors ...RequestEditorFn) (*GetPropertyMapWithPoiV2MapGetResponse, error) {
	rsp, err := c.GetPropertyMapWithPoiV2MapGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPropertyMapWithPoiV2MapGetResponse(rsp)
}

// GetOnlineListV2OnlineGetWithResponse request returning *GetOnlineListV2OnlineGetResponse
func (c *ClientWithResponses) GetOnlineListV2OnlineGetWithResponse(ctx context.Context, params *GetOnlineListV2OnlineGetParams, reqEditors ...RequestEditorFn) (*GetOnlineListV2OnlineGetResponse, error) {
	rsp, err := c.GetOnlineListV2OnlineGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOnlineListV2OnlineGetResponse(rsp)
}

// FindPlayerV2PlayerFindGetWithResponse request returning *FindPlayerV2PlayerFindGetResponse
func (c *ClientWithResponses) FindPlayerV2PlayerFindGetWithResponse(ctx context.Context, params *FindPlayerV2PlayerFindGetParams, reqEditors ...RequestEditorFn) (*FindPlayerV2PlayerFindGetResponse, error) {
	rsp, err := c.FindPlayerV2PlayerFindGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPlayerV2PlayerFindGetResponse(rsp)
}

// GetSobesListV2SobesGetWithResponse request returning *GetSobesListV2SobesGetResponse
func (c *ClientWithResponses) GetSobesListV2SobesGetWithResponse(ctx context.Context, params *GetSobesListV2SobesGetParams, reqEditors ...RequestEditorFn) (*GetSobesListV2SobesGetResponse, error) {
	rsp, err := c.GetSobesListV2SobesGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSobesListV2SobesGetResponse(rsp)
}

// GetStatusV2StatusGetWithResponse request returning *GetStatusV2StatusGetResponse
func (c *ClientWithResponses) GetStatusV2StatusGetWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatusV2StatusGetResponse, error) {
	rsp, err := c.GetStatusV2StatusGet(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatusV2StatusGetResponse(rsp)
}

// GetSubleadersListV2SubleadersGetWithResponse request returning *GetSubleadersListV2SubleadersGetResponse
func (c *ClientWithResponses) GetSubleadersListV2SubleadersGetWithResponse(ctx context.Context, params *GetSubleadersListV2SubleadersGetParams, reqEditors ...RequestEditorFn) (*GetSubleadersListV2SubleadersGetResponse, error) {
	rsp, err := c.GetSubleadersListV2SubleadersGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubleadersListV2SubleadersGetResponse(rsp)
}

// ParseGetServerAdminsV2AdminsGetResponse parses an HTTP response from a GetServerAdminsV2AdminsGetWithResponse call
func ParseGetServerAdminsV2AdminsGetResponse(rsp *http.Response) (*GetServerAdminsV2AdminsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetServerAdminsV2AdminsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AdminsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetFamiliesV2FamiliesGetResponse parses an HTTP response from a GetFamiliesV2FamiliesGetWithResponse call
func ParseGetFamiliesV2FamiliesGetResponse(rsp *http.Response) (*GetFamiliesV2FamiliesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFamiliesV2FamiliesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FamilyListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFamilyV2FamilyGetResponse parses an HTTP response from a GetFamilyV2FamilyGetWithResponse call
func ParseGetFamilyV2FamilyGetResponse(rsp *http.Response) (*GetFamilyV2FamilyGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFamilyV2FamilyGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FamilyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFractionMembersV2FractionGetResponse parses an HTTP response from a GetFractionMembersV2FractionGetWithResponse call
func ParseGetFractionMembersV2FractionGetResponse(rsp *http.Response) (*GetFractionMembersV2FractionGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFractionMembersV2FractionGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FractionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetFractionsListV2FractionsGetResponse parses an HTTP response from a GetFractionsListV2FractionsGetWithResponse call
func ParseGetFractionsListV2FractionsGetResponse(rsp *http.Response) (*GetFractionsListV2FractionsGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFractionsListV2FractionsGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FractionsListResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetGhettoListV2GhettoGetResponse parses an HTTP response from a GetGhettoListV2GhettoGetWithResponse call
func ParseGetGhettoListV2GhettoGetResponse(rsp *http.Response) (*GetGhettoListV2GhettoGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGhettoListV2GhettoGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GhettoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseReceiveGhettoDataV2GhettoServerIdPostResponse parses an HTTP response from a ReceiveGhettoDataV2GhettoServerIdPostWithResponse call
func ParseReceiveGhettoDataV2GhettoServerIdPostResponse(rsp *http.Response) (*ReceiveGhettoDataV2GhettoServerIdPostResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReceiveGhettoDataV2GhettoServerIdPostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetLeadersListV2LeadersGetResponse parses an HTTP response from a GetLeadersListV2LeadersGetWithResponse call
func ParseGetLeadersListV2LeadersGetResponse(rsp *http.Response) (*GetLeadersListV2LeadersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLeadersListV2LeadersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LeadersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetPropertyMapWithPoiV2MapGetResponse parses an HTTP response from a GetPropertyMapWithPoiV2MapGetWithResponse call
func ParseGetPropertyMapWithPoiV2MapGetResponse(rsp *http.Response) (*GetPropertyMapWithPoiV2MapGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPropertyMapWithPoiV2MapGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MapResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOnlineListV2OnlineGetResponse parses an HTTP response from a GetOnlineListV2OnlineGetWithResponse call
func ParseGetOnlineListV2OnlineGetResponse(rsp *http.Response) (*GetOnlineListV2OnlineGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOnlineListV2OnlineGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OnlinePlayersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseFindPlayerV2PlayerFindGetResponse parses an HTTP response from a FindPlayerV2PlayerFindGetWithResponse call
func ParseFindPlayerV2PlayerFindGetResponse(rsp *http.Response) (*FindPlayerV2PlayerFindGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPlayerV2PlayerFindGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlayerResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 503:
		var dest ApiErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON503 = &dest

	}

	return response, nil
}

// ParseGetSobesListV2SobesGetResponse parses an HTTP response from a GetSobesListV2SobesGetWithResponse call
func ParseGetSobesListV2SobesGetResponse(rsp *http.Response) (*GetSobesListV2SobesGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSobesListV2SobesGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SobesResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetStatusV2StatusGetResponse parses an HTTP response from a GetStatusV2StatusGetWithResponse call
func ParseGetStatusV2StatusGetResponse(rsp *http.Response) (*GetStatusV2StatusGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatusV2StatusGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSubleadersListV2SubleadersGetResponse parses an HTTP response from a GetSubleadersListV2SubleadersGetWithResponse call
func ParseGetSubleadersListV2SubleadersGetResponse(rsp *http.Response) (*GetSubleadersListV2SubleadersGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubleadersListV2SubleadersGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SubleadersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest HTTPValidationError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}
